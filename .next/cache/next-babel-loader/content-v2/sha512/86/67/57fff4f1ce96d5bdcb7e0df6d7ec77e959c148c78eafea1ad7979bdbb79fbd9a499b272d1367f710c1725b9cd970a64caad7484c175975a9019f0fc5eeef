{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { promises as fsp } from \"fs\";\nimport path from \"path\";\nimport fm from \"front-matter\";\nimport remark from \"remark\";\nimport remarkhtml from \"remark-html\";\nimport * as dateformat from \"./dateformat\";\nconst fileExt = \"md\"; // return absolute path to folder\n\nfunction absPath(dir) {\n  return path.isAbsolute(dir) ? dir : path.resolve(process.cwd(), dir);\n} // return array of files by type in a directory and remove extensions\n\n\nexport async function getFileIds(dir = \"./\") {\n  const loc = absPath(dir);\n  const files = await fsp.readdir(loc);\n  return files.filter(fn => path.extname(fn) === `.${fileExt}`).map(fn => path.basename(fn, path.extname(fn)));\n}\nexport async function getFileData(dir = \"./\", id) {\n  const file = path.join(absPath(dir), `${id}.${fileExt}`),\n        stat = await fsp.stat(file),\n        data = await fsp.readFile(file, \"utf8\"),\n        matter = fm(data),\n        html = (await remark().use(remarkhtml).process(matter.body)).toString(); // date formatting\n\n  const date = matter.attributes.date || stat.ctime;\n  matter.attributes.date = date.toUTCString();\n  matter.attributes.dateYMD = dateformat.ymd(date);\n  matter.attributes.dateFriendly = dateformat.friendly(date); // word count\n\n  const roundTo = 10,\n        readPerMin = 200,\n        numFormat = new Intl.NumberFormat(\"en\"),\n        count = matter.body.replace(/\\W/g, \" \").replace(/\\s+/g, \" \").split(\" \").length,\n        words = Math.ceil(count / roundTo) * roundTo,\n        mins = Math.ceil(count / readPerMin);\n  matter.attributes.wordcount = `${numFormat.format(words)} words, ${numFormat.format(mins)}-minute read`;\n  return _objectSpread({\n    id,\n    html\n  }, matter.attributes);\n} // return sorted array of all posts for indexes\n\nexport async function getAllFiles(dir) {\n  const now = dateformat.ymd(new Date()),\n        files = await getFileIds(dir),\n        data = await Promise.allSettled(files.map(id => getFileData(dir, id)));\n  return data.filter(md => md.value && md.value.dateYMD <= now).map(md => md.value).sort((a, b) => a.dateYMD < b.dateYMD ? 1 : -1);\n}","map":{"version":3,"sources":["/Users/milan/Development/tutorials/nextjs-blog-app/lib/posts-md.js"],"names":["promises","fsp","path","fm","remark","remarkhtml","dateformat","fileExt","absPath","dir","isAbsolute","resolve","process","cwd","getFileIds","loc","files","readdir","filter","fn","extname","map","basename","getFileData","id","file","join","stat","data","readFile","matter","html","use","body","toString","date","attributes","ctime","toUTCString","dateYMD","ymd","dateFriendly","friendly","roundTo","readPerMin","numFormat","Intl","NumberFormat","count","replace","split","length","words","Math","ceil","mins","wordcount","format","getAllFiles","now","Date","Promise","allSettled","md","value","sort","a","b"],"mappings":";;;;;;AAAA,SAASA,QAAQ,IAAIC,GAArB,QAAgC,IAAhC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,EAAP,MAAe,cAAf;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,KAAKC,UAAZ,MAA4B,cAA5B;AACA,MAAMC,OAAO,GAAG,IAAhB,C,CAEA;;AACA,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACpB,SAAOP,IAAI,CAACQ,UAAL,CAAgBD,GAAhB,IAAuBA,GAAvB,GAA6BP,IAAI,CAACS,OAAL,CAAaC,OAAO,CAACC,GAAR,EAAb,EAA4BJ,GAA5B,CAApC;AACD,C,CACD;;;AACA,OAAO,eAAeK,UAAf,CAA0BL,GAAG,GAAG,IAAhC,EAAsC;AAC3C,QAAMM,GAAG,GAAGP,OAAO,CAACC,GAAD,CAAnB;AACA,QAAMO,KAAK,GAAG,MAAMf,GAAG,CAACgB,OAAJ,CAAYF,GAAZ,CAApB;AACA,SAAOC,KAAK,CACTE,MADI,CACGC,EAAE,IAAIjB,IAAI,CAACkB,OAAL,CAAaD,EAAb,MAAsB,IAAGZ,OAAQ,EAD1C,EAEJc,GAFI,CAEAF,EAAE,IAAIjB,IAAI,CAACoB,QAAL,CAAcH,EAAd,EAAkBjB,IAAI,CAACkB,OAAL,CAAaD,EAAb,CAAlB,CAFN,CAAP;AAGD;AAED,OAAO,eAAeI,WAAf,CAA2Bd,GAAG,GAAG,IAAjC,EAAuCe,EAAvC,EAA2C;AAChD,QAAMC,IAAI,GAAGvB,IAAI,CAACwB,IAAL,CAAUlB,OAAO,CAACC,GAAD,CAAjB,EAAyB,GAAEe,EAAG,IAAGjB,OAAQ,EAAzC,CAAb;AAAA,QACEoB,IAAI,GAAG,MAAM1B,GAAG,CAAC0B,IAAJ,CAASF,IAAT,CADf;AAAA,QAEEG,IAAI,GAAG,MAAM3B,GAAG,CAAC4B,QAAJ,CAAaJ,IAAb,EAAmB,MAAnB,CAFf;AAAA,QAGEK,MAAM,GAAG3B,EAAE,CAACyB,IAAD,CAHb;AAAA,QAIEG,IAAI,GAAG,CAAC,MAAM3B,MAAM,GAAG4B,GAAT,CAAa3B,UAAb,EAAyBO,OAAzB,CAAiCkB,MAAM,CAACG,IAAxC,CAAP,EAAsDC,QAAtD,EAJT,CADgD,CAMhD;;AACA,QAAMC,IAAI,GAAGL,MAAM,CAACM,UAAP,CAAkBD,IAAlB,IAA0BR,IAAI,CAACU,KAA5C;AACAP,EAAAA,MAAM,CAACM,UAAP,CAAkBD,IAAlB,GAAyBA,IAAI,CAACG,WAAL,EAAzB;AACAR,EAAAA,MAAM,CAACM,UAAP,CAAkBG,OAAlB,GAA4BjC,UAAU,CAACkC,GAAX,CAAeL,IAAf,CAA5B;AACAL,EAAAA,MAAM,CAACM,UAAP,CAAkBK,YAAlB,GAAiCnC,UAAU,CAACoC,QAAX,CAAoBP,IAApB,CAAjC,CAVgD,CAWhD;;AACA,QAAMQ,OAAO,GAAG,EAAhB;AAAA,QACEC,UAAU,GAAG,GADf;AAAA,QAEEC,SAAS,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsB,IAAtB,CAFd;AAAA,QAGEC,KAAK,GAAGlB,MAAM,CAACG,IAAP,CAAYgB,OAAZ,CAAoB,KAApB,EAA2B,GAA3B,EAAgCA,OAAhC,CAAwC,MAAxC,EAAgD,GAAhD,EAAqDC,KAArD,CAA2D,GAA3D,EACLC,MAJL;AAAA,QAKEC,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUN,KAAK,GAAGL,OAAlB,IAA6BA,OALvC;AAAA,QAMEY,IAAI,GAAGF,IAAI,CAACC,IAAL,CAAUN,KAAK,GAAGJ,UAAlB,CANT;AAOAd,EAAAA,MAAM,CAACM,UAAP,CAAkBoB,SAAlB,GAA+B,GAAEX,SAAS,CAACY,MAAV,CAC/BL,KAD+B,CAE/B,WAAUP,SAAS,CAACY,MAAV,CAAiBF,IAAjB,CAAuB,cAFnC;AAGA;AACE/B,IAAAA,EADF;AAEEO,IAAAA;AAFF,KAGKD,MAAM,CAACM,UAHZ;AAKD,C,CAED;;AACA,OAAO,eAAesB,WAAf,CAA2BjD,GAA3B,EAAgC;AACrC,QAAMkD,GAAG,GAAGrD,UAAU,CAACkC,GAAX,CAAe,IAAIoB,IAAJ,EAAf,CAAZ;AAAA,QACE5C,KAAK,GAAG,MAAMF,UAAU,CAACL,GAAD,CAD1B;AAAA,QAEEmB,IAAI,GAAG,MAAMiC,OAAO,CAACC,UAAR,CAAmB9C,KAAK,CAACK,GAAN,CAAUG,EAAE,IAAID,WAAW,CAACd,GAAD,EAAMe,EAAN,CAA3B,CAAnB,CAFf;AAGA,SAAOI,IAAI,CACRV,MADI,CACG6C,EAAE,IAAIA,EAAE,CAACC,KAAH,IAAYD,EAAE,CAACC,KAAH,CAASzB,OAAT,IAAoBoB,GADzC,EAEJtC,GAFI,CAEA0C,EAAE,IAAIA,EAAE,CAACC,KAFT,EAGJC,IAHI,CAGC,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAAC3B,OAAF,GAAY4B,CAAC,CAAC5B,OAAd,GAAwB,CAAxB,GAA4B,CAAC,CAHzC,CAAP;AAID","sourcesContent":["import { promises as fsp } from \"fs\";\nimport path from \"path\";\nimport fm from \"front-matter\";\nimport remark from \"remark\";\nimport remarkhtml from \"remark-html\";\nimport * as dateformat from \"./dateformat\";\nconst fileExt = \"md\";\n\n// return absolute path to folder\nfunction absPath(dir) {\n  return path.isAbsolute(dir) ? dir : path.resolve(process.cwd(), dir);\n}\n// return array of files by type in a directory and remove extensions\nexport async function getFileIds(dir = \"./\") {\n  const loc = absPath(dir);\n  const files = await fsp.readdir(loc);\n  return files\n    .filter(fn => path.extname(fn) === `.${fileExt}`)\n    .map(fn => path.basename(fn, path.extname(fn)));\n}\n\nexport async function getFileData(dir = \"./\", id) {\n  const file = path.join(absPath(dir), `${id}.${fileExt}`),\n    stat = await fsp.stat(file),\n    data = await fsp.readFile(file, \"utf8\"),\n    matter = fm(data),\n    html = (await remark().use(remarkhtml).process(matter.body)).toString();\n  // date formatting\n  const date = matter.attributes.date || stat.ctime;\n  matter.attributes.date = date.toUTCString();\n  matter.attributes.dateYMD = dateformat.ymd(date);\n  matter.attributes.dateFriendly = dateformat.friendly(date);\n  // word count\n  const roundTo = 10,\n    readPerMin = 200,\n    numFormat = new Intl.NumberFormat(\"en\"),\n    count = matter.body.replace(/\\W/g, \" \").replace(/\\s+/g, \" \").split(\" \")\n      .length,\n    words = Math.ceil(count / roundTo) * roundTo,\n    mins = Math.ceil(count / readPerMin);\n  matter.attributes.wordcount = `${numFormat.format(\n    words\n  )} words, ${numFormat.format(mins)}-minute read`;\n  return {\n    id,\n    html,\n    ...matter.attributes,\n  };\n}\n\n// return sorted array of all posts for indexes\nexport async function getAllFiles(dir) {\n  const now = dateformat.ymd(new Date()),\n    files = await getFileIds(dir),\n    data = await Promise.allSettled(files.map(id => getFileData(dir, id)));\n  return data\n    .filter(md => md.value && md.value.dateYMD <= now)\n    .map(md => md.value)\n    .sort((a, b) => (a.dateYMD < b.dateYMD ? 1 : -1));\n}\n"]},"metadata":{},"sourceType":"module"}